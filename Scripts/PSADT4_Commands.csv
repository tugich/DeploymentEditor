"ID","CommandName","Description"
"1","Add-ADTEdgeExtension","This function adds an extension for Microsoft Edge using the ExtensionSettings policy: https://learn.microsoft.com/en-us/deployedge/microsoft-edge-manage-extensions-ref-guide. This enables Edge Extensions to be installed and managed like applications, enabling extensions to be pushed to specific devices or users alongside existing GPO/Intune extension policies. This should not be used in conjunction with Edge Management Service which leverages the same registry key to configure Edge extensions."
"2","Add-ADTSessionClosingCallback","The Add-ADTSessionClosingCallback function registers a callback command to be executed when the ADT session is closing. This function sends the callback to the backend function for processing."
"3","Add-ADTSessionFinishingCallback","The Add-ADTSessionFinishingCallback function registers a callback command to be executed when the ADT session is finishing. This function sends the callback to the backend function for processing."
"4","Add-ADTSessionOpeningCallback","The Add-ADTSessionOpeningCallback function registers a callback command to be executed when the ADT session is opening. This function sends the callback to the backend function for processing."
"5","Add-ADTSessionStartingCallback","The Add-ADTSessionStartingCallback function registers a callback command to be executed when the ADT session is starting. This function sends the callback to the backend function for processing."
"6","Block-ADTAppExecution","This function is called when you pass the -BlockExecution parameter to the Stop-RunningApplications function. It does the following: 1. Makes a copy of this script in a temporary directory on the local machine. 2. Checks for an existing scheduled task from previous failed installation attempt where apps were blocked and if found, calls the Unblock-ADTAppExecution function to restore the original IFEO registry keys. This is to prevent the function from overriding the backup of the original IFEO options. 3. Creates a scheduled task to restore the IFEO registry key values in case the script is terminated uncleanly by calling the local temporary copy of this script with the parameter -CleanupBlockedApps. 4. Modifies the ""Image File Execution Options"" registry key for the specified process(s) to call this script with the parameter -ShowBlockedAppDialog. 5. When the script is called with those parameters, it will display a custom message to the user to indicate that execution of the application has been blocked while the installation is in progress. The text of this message can be customized in the strings.psd1 file."
"7","Close-ADTInstallationProgress","Closes the dialog created by Show-ADTInstallationProgress. This function is called by the Close-ADTSession function to close a running instance of the progress dialog if found."
"8","Close-ADTSession","The Close-ADTSession function closes the active ADT session, updates the session's exit code if provided, invokes all registered callbacks, and cleans up the session state. If this is the last session, it flags the module as uninitialized and exits the process with the last exit code."
"9","Complete-ADTFunction","The Complete-ADTFunction function finalizes the execution of an ADT function by writing a debug log message and restoring the original global verbosity if it was archived off."
"10","Convert-ADTRegistryPath","Converts the specified registry key path to a format that is compatible with built-in PowerShell cmdlets. Converts registry key hives to their full paths. Example: HKLM is converted to ""Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE""."
"11","Convert-ADTValuesFromRemainingArguments","This function converts the collected values from a ValueFromRemainingArguments parameter value into a dictionary or PowerShell.exe command line arguments."
"12","Convert-ADTValueType","This function uses C# code to cast the provided value to the requested type. This avoids errors from PowerShell when values exceed the casted value type's range."
"13","ConvertTo-ADTNTAccountOrSID","Specify either the NT Account name or the SID and get the other. Can also convert well known sid types."
"14","Copy-ADTContentToCache","Copies the toolkit content to a cache folder on the local machine and sets the $adtSession.DirFiles and $adtSession.DirSupportFiles directory to the cache path. This function is useful in environments where an Endpoint Management solution does not provide a managed cache for source files, such as Intune. It is important to clean up the cache in the uninstall section for the current version and potentially also in the pre-installation section for previous versions."
"15","Copy-ADTFile","Copies files and directories from a source to a destination. This function supports recursive copying, overwriting existing files, and returning the copied items."
"16","Copy-ADTFileToUserProfiles","The Copy-ADTFileToUserProfiles function copies one or more items to each user profile on the system. It supports various options such as recursion, flattening files, and using Robocopy to overcome the 260 character limit."
"17","Disable-ADTTerminalServerInstallMode","The Disable-ADTTerminalServerInstallMode function changes the server mode to user install mode for Remote Desktop Session Host/Citrix servers. This is useful for ensuring that applications are installed in a way that is compatible with multi-user environments."
"18","Dismount-ADTWimFile","The Dismount-ADTWimFile function dismounts a WIM file from the specified mount point and discards all changes. This function ensures that the specified path is a valid WIM mount point before attempting to dismount."
"19","Enable-ADTTerminalServerInstallMode","The Enable-ADTTerminalServerInstallMode function changes the server mode to user install mode for Remote Desktop Session Host/Citrix servers. This is useful for ensuring that applications are installed in a way that is compatible with multi-user environments."
"20","Export-ADTEnvironmentTableToSessionState","This function exports the content of `Get-ADTEnvironmentTable` to the provided SessionState as variables."
"21","Get-ADTApplication","Retrieves information about installed applications by querying the registry. You can specify an application name, a product code, or both. Returns information about application publisher, name & version, product code, uninstall string, install source, location, date, and application architecture."
"22","Get-ADTBoundParametersAndDefaultValues","This function processes the provided InvocationInfo and combines the results of $PSBoundParameters and default-valued parameters via the InvocationInfo's ScriptBlock AST (Abstract Syntax Tree)."
"23","Get-ADTCommandTable","This function returns PSAppDeployToolkit's safe command lookup table, which can be used for command lookups within extending modules. Please note that PSAppDeployToolkit's safe command table only has commands in it that are used within this module, and not necessarily all commands offered by PowerShell and its built-in modules out of the box."
"24","Get-ADTConfig","The Get-ADTConfig function retrieves the configuration data for the ADT module. This function ensures that the ADT module has been initialized before attempting to retrieve the configuration data. If the module is not initialized, it throws an error."
"25","Get-ADTDeferHistory","Get the history of deferrals in the registry for the current application."
"26","Get-ADTEnvironment","The Get-ADTEnvironment function retrieves the environment data for the ADT module. This function ensures that the ADT module has been initialized before attempting to retrieve the environment data. If the module is not initialized, it throws an error. This function has been replaced by Get-ADTEnvironmentTable and will be removed from a future release."
"27","Get-ADTEnvironmentTable","The Get-ADTEnvironmentTable function retrieves the environment data for the ADT module. This function ensures that the ADT module has been initialized before attempting to retrieve the environment data. If the module is not initialized, it throws an error."
"28","Get-ADTFileVersion","The Get-ADTFileVersion function retrieves the version information of the specified file. By default, it returns the FileVersion, but it can also return the ProductVersion if the -ProductVersion switch is specified."
"29","Get-ADTFreeDiskSpace","The Get-ADTFreeDiskSpace function retrieves the free disk space in MB on a specified drive. If no drive is specified, it defaults to the system drive. This function is useful for monitoring disk space availability."
"30","Get-ADTIniValue","The Get-ADTIniValue function parses an INI file and returns the value of the specified section and key. This function is useful for retrieving configuration settings stored in INI files."
"31","Get-ADTLoggedOnUser","The Get-ADTLoggedOnUser function retrieves session details for all local and RDP logged on users using Win32 APIs. It provides information such as NTAccount, SID, UserName, DomainName, SessionId, SessionName, ConnectState, IsCurrentSession, IsConsoleSession, IsUserSession, IsActiveUserSession, IsRdpSession, IsLocalAdmin, LogonTime, IdleTime, DisconnectTime, ClientName, ClientProtocolType, ClientDirectory, and ClientBuildNumber."
"32","Get-ADTMsiExitCodeMessage","Get message for MSI exit code by reading it from msimsg.dll."
"33","Get-ADTMsiTableProperty","Use the Windows Installer object to read all of the properties from a Windows Installer database table or the Summary Information stream."
"34","Get-ADTObjectProperty","Get a property from any object."
"35","Get-ADTOperatingSystemInfo","Gets information about the current computer's operating system, such as name, version, edition, and other information."
"36","Get-ADTPEFileArchitecture","Determine if a PE file is a 32-bit or a 64-bit file by examining the file's image file header. PE file extensions: .exe, .dll, .ocx, .drv, .sys, .scr, .efi, .cpl, .fon"
"37","Get-ADTPendingReboot","Check WMI and the registry to determine if the system has a pending reboot operation from any of the following: a) Component Based Servicing (Vista, Windows 2008) b) Windows Update / Auto Update (XP, Windows 2003 / 2008) c) SCCM 2012 Clients (DetermineIfRebootPending WMI method) d) App-V Pending Tasks (global based Appv 5.0 SP2) e) Pending File Rename Operations (XP, Windows 2003 / 2008)"
"38","Get-ADTPowerShellProcessPath","The Get-ADTPowerShellProcessPath function returns the path to the PowerShell executable. It determines whether the current PowerShell session is running in Windows PowerShell or PowerShell Core and returns the appropriate executable path."
"39","Get-ADTPresentationSettingsEnabledUsers","Tests whether any users have presentation mode enabled on their device. This can be enabled via the PC's Mobility Settings, or with PresentationSettings.exe."
"40","Get-ADTRegistryKey","Retrieves value names and value data for a specified registry key or optionally, a specific value. If the registry key does not exist or contain any values, the function will return $null by default. To test for existence of a registry key path, use built-in Test-Path cmdlet."
"41","Get-ADTRunAsActiveUser","The Get-ADTRunAsActiveUser function determines the account that will be used to execute commands in the user session when the toolkit is running under the SYSTEM account. The active console user will be chosen first. If no active console user is found, for multi-session operating systems, the first logged-on user will be used instead."
"42","Get-ADTSchedulerTask","Retrieve all details for scheduled tasks on the local computer using schtasks.exe. All property names have spaces and colons removed. This function is deprecated. Please migrate your scripts to use the built-in Get-ScheduledTask Cmdlet."
"43","Get-ADTServiceStartMode","Retrieves the startup mode of a specified service. This function checks the service's start type and adjusts the result if the service is set to 'Automatic (Delayed Start)'."
"44","Get-ADTSession","The Get-ADTSession function returns the most recent session from the ADT module data. If no sessions are found, it throws an error indicating that an ADT session should be opened using Open-ADTSession before calling this function."
"45","Get-ADTShortcut","Get information from a .lnk or .url type shortcut. Returns a hashtable with details about the shortcut such as TargetPath, Arguments, Description, and more."
"46","Get-ADTStringTable","The Get-ADTStringTable function returns the string database if it has been initialized. If the string database is not initialized, it throws an error indicating that Initialize-ADTModule should be called before using this function."
"47","Get-ADTUniversalDate","Converts the current datetime or a datetime string for the current culture into a universal sortable date time pattern, e.g. 2013-08-22 11:51:52Z."
"48","Get-ADTUserProfiles","Get the User Profile Path, User Account SID, and the User Account Name for all users that log onto the machine and also the Default User (which does not log on). Please note that the NTAccount property may be empty for some user profiles but the SID and ProfilePath properties will always be populated."
"49","Get-ADTWindowTitle","Search for a window title. If window title searched for returns more than one result, then details for each window will be displayed. Returns the following properties for each window: - WindowTitle - WindowHandle - ParentProcess - ParentProcessMainWindowHandle - ParentProcessId Function does not work in SYSTEM context unless launched with ""psexec.exe -s -i"" to run it as an interactive process under the SYSTEM account."
"50","Initialize-ADTFunction","Initializes the ADT function environment by setting up necessary variables and logging function start details. It ensures that the function always stops on errors and handles verbose logging."
"51","Initialize-ADTModule","The Initialize-ADTModule function sets up the environment for the ADT module by initializing necessary variables, configurations, and string tables. It ensures that the module is not initialized while there is an active ADT session in progress. This function prepares the module for use by clearing callbacks, sessions, and setting up the environment table."
"52","Install-ADTMSUpdates","Install all Microsoft Updates of type "".exe"", "".msu"", or "".msp"" in a given directory (recursively search directory). The function will check if the update is already installed and skip it if it is. It handles older redistributables and different types of updates appropriately."
"53","Install-ADTSCCMSoftwareUpdates","Scans for outstanding SCCM updates to be installed and installs the pending updates. Only compatible with SCCM 2012 Client or higher. This function can take several minutes to run."
"54","Invoke-ADTAllUsersRegistryAction","Set HKCU registry settings for all current and future users by loading their NTUSER.dat registry hive file, and making the modifications. This function will modify HKCU settings for all users even when executed under the SYSTEM account and can be used as an alternative to using ActiveSetup for registry settings. To ensure new users in the future get the registry edits, the Default User registry hive used to provision the registry for new users is modified. The advantage of using this function over ActiveSetup is that a user does not have to log off and log back on before the changes take effect."
"55","Invoke-ADTCommandWithRetries","This function invokes the specified cmdlet/function, accepting all of its parameters but retries an operation for the configured value before throwing."
"56","Invoke-ADTFunctionErrorHandler","This function handles errors within ADT functions by logging the error message and optionally passing through the error record. It recovers the true ErrorActionPreference set by the caller and sets it within the function. If a log message is provided, it appends the resolved error record to the log message. Depending on the ErrorActionPreference, it either throws a terminating error or writes a non-terminating error."
"57","Invoke-ADTObjectMethod","Invoke method on any object with or without using named parameters."
"58","Invoke-ADTRegSvr32","Register or unregister a DLL file using regsvr32.exe. This function determines the bitness of the DLL file and uses the appropriate version of regsvr32.exe to perform the action. It supports both 32-bit and 64-bit DLL files on corresponding operating systems."
"59","Invoke-ADTSCCMTask","Triggers SCCM to invoke the requested schedule task ID. This function supports a variety of schedule IDs compatible with different versions of the SCCM client. It ensures that the correct schedule IDs are used based on the SCCM client version."
"60","Mount-ADTWimFile","Mounts a WIM file to a specified directory. The function supports mounting by image index or image name. It also provides options to forcefully remove existing directories and return the mounted image details."
"61","New-ADTErrorRecord","This function creates a new ErrorRecord object with the specified exception, error category, and optional parameters. It allows for detailed error information to be captured and returned to the caller, who can then throw the error."
"62","New-ADTFolder","Create a new folder if it does not exist. This function checks if the specified path already exists and creates the folder if it does not. It logs the creation process and handles any errors that may occur during the folder creation."
"63","New-ADTMsiTransform","Create a transform file for an MSI database and create/modify properties in the Properties table. This function allows you to specify an existing transform to apply before making changes and to define the path for the new transform file. If the new transform file already exists, it will be deleted before creating a new one."
"64","New-ADTShortcut","Creates a new shortcut .lnk or .url file, with configurable options. This function allows you to specify various parameters such as the target path, arguments, icon location, description, working directory, window style, run as administrator, and hotkey."
"65","New-ADTTemplate","Specify a destination path where a new folder will be created. You also have the option of creating a template for v3 compatibility mode."
"66","New-ADTValidateScriptErrorRecord","This function creates a new ErrorRecord object for script validation errors. It takes the parameter name, provided value, exception message, and an optional inner exception to build a detailed error record. This helps in identifying and handling invalid parameter values in scripts."
"67","New-ADTZipFile","Create a new zip archive or add content to an existing archive by using PowerShell's Compress-Archive."
"68","Open-ADTSession","This function initializes and opens a new ADT session with the specified parameters. It handles the setup of the session environment and processes any callbacks defined for the session. If the session fails to open, it handles the error and closes the session if necessary."
"69","Out-ADTPowerShellEncodedCommand","This function takes a PowerShell command as input and encodes it into a Base64 string. This is useful for passing commands to PowerShell through mechanisms that require encoded input."
"70","Register-ADTDll","This function registers a DLL file using regsvr32.exe. It ensures that the specified DLL file exists before attempting to register it. If the file does not exist, it throws an error."
"71","Remove-ADTContentFromCache","This function removes the toolkit content from the cache folder on the local machine. It also reverts the $adtSession.DirFiles and $adtSession.SupportFiles directory to their original state. If the specified cache folder does not exist, it logs a message and exits."
"72","Remove-ADTEdgeExtension","This function removes an extension for Microsoft Edge using the ExtensionSettings policy: https://learn.microsoft.com/en-us/deployedge/microsoft-edge-manage-extensions-ref-guide. This enables Edge Extensions to be installed and managed like applications, enabling extensions to be pushed to specific devices or users alongside existing GPO/Intune extension policies. This should not be used in conjunction with Edge Management Service which leverages the same registry key to configure Edge extensions."
"73","Remove-ADTFile","This function removes one or more items from a given path on the filesystem. It can handle both wildcard paths and literal paths. If the specified path does not exist, it logs a warning instead of throwing an error. The function can also delete items recursively if the Recurse parameter is specified."
"74","Remove-ADTFileFromUserProfiles","This function removes one or more items from each user profile on the system. It can handle both wildcard paths and literal paths. If the specified path does not exist, it logs a warning instead of throwing an error. The function can also delete items recursively if the Recurse parameter is specified. Additionally, it allows excluding specific NT accounts, system profiles, service profiles, and the default user profile."
"75","Remove-ADTFolder","This function removes a folder and all files within it, with or without recursion, in a given path. If the specified folder does not exist, it logs a warning instead of throwing an error. The function can also delete items recursively if the DisableRecursion parameter is not specified."
"76","Remove-ADTInvalidFileNameChars","This function removes invalid characters from the supplied string and returns a valid filename as a string. It ensures that the resulting string does not contain any characters that are not allowed in filenames. This function should not be used for entire paths as '\' is not a valid filename character."
"77","Remove-ADTRegistryKey","This function deletes the specified registry key or value. It can handle both registry keys and values, and it supports recursive deletion of registry keys. If the SID parameter is specified, it converts HKEY_CURRENT_USER registry keys to the HKEY_USERS\$SID format, allowing for the manipulation of HKCU registry settings for all users on the system."
"78","Remove-ADTSessionClosingCallback","This function removes a specified callback function from the ADT session closing event. The callback function must be provided as a parameter. If the operation fails, it throws a terminating error."
"79","Remove-ADTSessionFinishingCallback","This function removes a specified callback function from the ADT session finishing event. The callback function must be provided as a parameter. If the operation fails, it throws a terminating error."
"80","Remove-ADTSessionOpeningCallback","This function removes a specified callback function from the ADT session opening event. The callback function must be provided as a parameter. If the operation fails, it throws a terminating error."
"81","Remove-ADTSessionStartingCallback","This function removes a specified callback function from the ADT session starting event. The callback function must be provided as a parameter. If the operation fails, it throws a terminating error."
"82","Reset-ADTDeferHistory","Reset the history of deferrals in the registry for the current application."
"83","Resolve-ADTErrorRecord","Enumerates an ErrorRecord, or a collection of ErrorRecord properties. This function can filter and display specific properties of the ErrorRecord, and can exclude certain parts of the error details."
"84","Send-ADTKeys","Send a sequence of keys to one or more application windows. If the window title searched for returns more than one window, then all of them will receive the sent keys. Function does not work in SYSTEM context unless launched with ""psexec.exe -s -i"" to run it as an interactive process under the SYSTEM account."
"85","Set-ADTActiveSetup","Active Setup allows handling of per-user changes registry/file changes upon login. A registry key is created in the HKLM registry hive which gets replicated to the HKCU hive when a user logs in. If the ""Version"" value of the Active Setup entry in HKLM is higher than the version value in HKCU, the file referenced in ""StubPath"" is executed. This Function: - Creates the registry entries in ""HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\$($adtSession.InstallName)"". - Creates StubPath value depending on the file extension of the $StubExePath parameter. - Handles Version value with YYYYMMDDHHMMSS granularity to permit re-installs on the same day and still trigger Active Setup after Version increase. - Copies/overwrites the StubPath file to $StubExePath destination path if file exists in 'Files' subdirectory of script directory. - Executes the StubPath file for the current user based on $NoExecuteForCurrentUser (no need to logout/login to trigger Active Setup)."
"86","Set-ADTDeferHistory","Set the history of deferrals in the registry for the current application."
"87","Set-ADTIniValue","Opens an INI file and sets the value of the specified section and key. If the value is set to $null, the key will be removed from the section."
"88","Set-ADTItemPermission","Allows you to easily change permissions on files or folders for a given user or group. You can add, remove or replace permissions, set inheritance and propagation."
"89","Set-ADTMsiProperty","Set a property in the MSI property table."
"90","Set-ADTPowerShellCulture","This function changes the current thread's Culture and UICulture to the specified culture."
"91","Set-ADTRegistryKey","Creates a registry key name, value, and value data; it sets the same if it already exists. This function can also handle registry keys for specific user SIDs and 32-bit registry on 64-bit systems."
"92","Set-ADTServiceStartMode","Set the service startup mode. This function allows you to configure the startup mode of a specified service. The startup modes available are: Automatic, Automatic (Delayed Start), Manual, Disabled, Boot, and System."
"93","Set-ADTShortcut","Modifies a shortcut - .lnk or .url file, with configurable options. Only specify the parameters that you want to change."
"94","Show-ADTBalloonTip","Displays a balloon tip notification in the system tray. This function can be used to show notifications to the user with customizable text, title, icon, and display duration. For Windows 10 and above, balloon tips automatically get translated by the system into toast notifications."
"95","Show-ADTDialogBox","Display a custom dialog box with optional title, buttons, icon, and timeout. The default button is ""OK"", the default Icon is ""None"", and the default Timeout is None. Show-ADTInstallationPrompt is recommended over this function as it provides more customization and uses consistent branding with the other UI components."
"96","Show-ADTHelpConsole","Displays a help console for the ADT module in a new PowerShell window. The console provides a graphical interface to browse and view detailed help information for all commands exported by the ADT module. The help console includes a list box to select commands and a text box to display the full help content for the selected command."
"97","Show-ADTInstallationProgress","Creates a WPF window in a separate thread to display a marquee style progress ellipse with a custom message that can be updated. The status message supports line breaks. The first time this function is called in a script, it will display a balloon tip notification to indicate that the installation has started (provided balloon tips are enabled in the config.psd1 file)."
"98","Show-ADTInstallationPrompt","Displays a custom installation prompt with the toolkit branding and optional buttons. Any combination of Left, Middle, or Right buttons can be displayed. The return value of the button clicked by the user is the button text specified. The prompt can also display a system icon and be configured to persist, minimize other windows, or timeout after a specified period."
"99","Show-ADTInstallationRestartPrompt","Displays a restart prompt with a countdown to a forced restart. The prompt can be customized with a title, countdown duration, and whether it should be topmost. It also supports silent mode where the restart can be triggered without user interaction."
"100","Show-ADTInstallationWelcome","The following prompts can be included in the welcome dialog: a) Close the specified running applications, or optionally close the applications without showing a prompt (using the -Silent switch). b) Defer the installation a certain number of times, for a certain number of days or until a deadline is reached. c) Countdown until applications are automatically closed. d) Prevent users from launching the specified applications while the installation is in progress."
"101","Start-ADTMsiProcess","This function utilizes msiexec.exe to handle various operations on MSI and MSP files, as well as MSI product codes. The operations include installation, uninstallation, patching, repair, and setting up active configurations. If the -Action parameter is set to ""Install"" and the MSI is already installed, the function will terminate without performing any actions. The function automatically sets default switches for msiexec based on preferences defined in the config.psd1 file. Additionally, it generates a log file name and creates a verbose log for all msiexec operations, ensuring detailed tracking. The MSI or MSP file is expected to reside in the ""Files"" subdirectory of the App Deploy Toolkit, with transform files expected to be in the same directory as the MSI file."
"102","Start-ADTMspProcess","Reads SummaryInfo targeted product codes in MSP file and determines if the MSP file applies to any installed products. If a valid installed product is found, triggers the Start-ADTMsiProcess function to patch the installation. Uses default config MSI parameters. You can use -AdditionalArgumentList to add additional parameters."
"103","Start-ADTProcess","Executes a process, e.g. a file included in the Files directory of the App Deploy Toolkit, or a file on the local machine. Provides various options for handling the return codes (see Parameters)."
"104","Start-ADTProcessAsUser","Invokes a process from SYSTEM in another user's session."
"105","Start-ADTServiceAndDependencies","This function starts a specified Windows service and its dependencies. It provides options to skip starting dependent services, wait for a service to get out of a pending state, and return the service object."
"106","Stop-ADTServiceAndDependencies","This function stops a specified Windows service and its dependencies. It provides options to skip stopping dependent services, wait for a service to get out of a pending state, and return the service object."
"107","Test-ADTBattery","Tests whether the local machine is running on AC power and returns true/false. For detailed information, use the -PassThru option to get a hashtable containing various battery and power status properties."
"108","Test-ADTCallerIsAdmin","This function checks if the current user is a member of the Administrators group. It returns a boolean value indicating whether the user has administrative privileges."
"109","Test-ADTMicrophoneInUse","Tests whether someone is using the microphone on their device. This could be within Teams, Zoom, a game, or any other app that uses a microphone."
"110","Test-ADTModuleInitialized","This function checks if the ADT (PSAppDeployToolkit) module is initialized by retrieving the module data and returning the initialization status."
"111","Test-ADTMSUpdates","This function checks if a specified Microsoft Windows update, identified by its KB number, is installed on the local machine. It first attempts to find the update using the Get-HotFix cmdlet and, if unsuccessful, uses a COM object to search the update history."
"112","Test-ADTMutexAvailability","A mutex can be used to serialize applications and prevent multiple instances from being opened at the same time. Wait, up to a timeout (default is 1 millisecond), for the mutex to become available for an exclusive lock."
"113","Test-ADTNetworkConnection","Tests for an active local network connection, excluding wireless and virtual network adapters, by querying the Win32_NetworkAdapter WMI class. This function checks if any physical network adapter is in the 'Up' status."
"114","Test-ADTOobeCompleted","This function checks if the current device has completed the Out-of-Box Experience (OOBE)."
"115","Test-ADTPowerPoint","Tests whether someone is presenting using PowerPoint in either fullscreen slideshow mode or presentation mode. This function checks if the PowerPoint process has a window with a title that begins with ""PowerPoint Slide Show"" or ""PowerPoint-"" for non-English language systems. There is a possibility of a false positive if the PowerPoint filename starts with ""PowerPoint Slide Show"". If the previous detection method does not detect PowerPoint in fullscreen mode, it checks if PowerPoint is in Presentation Mode (only works on Windows Vista or higher)."
"116","Test-ADTRegistryValue","Checks a registry key path to see if it has a value with a given name. Can correctly handle cases where a value simply has an empty or null value."
"117","Test-ADTServiceExists","Check to see if a service exists. The UseCIM switch can be used in conjunction with PassThru to return WMI objects for PSADT v3.x compatibility, however, this method fails in Windows Sandbox."
"118","Test-ADTSessionActive","This function checks if there is an active ADT (App Deploy Toolkit) session by retrieving the module data and returning the count of active sessions."
"119","Test-ADTUserIsBusy","Tests whether the device's microphone is in use, the user has manually turned on presentation mode, or PowerPoint is running in either fullscreen slideshow mode or presentation mode."
"120","Unblock-ADTAppExecution","This function is called by the Close-ADTSession function or when the script itself is called with the parameters -CleanupBlockedApps. It undoes the actions performed by Block-ADTAppExecution, allowing previously blocked applications to execute."
"121","Uninstall-ADTApplication","Removes one or more applications specified by name, filter script, or InstalledApplication object from Get-ADTApplication. Enumerates the registry for installed applications via Get-ADTApplication, matching the specified application name and uninstalls that application using its uninstall string, with the ability to specify additional uninstall parameters also."
"122","Unregister-ADTDll","Unregister a DLL file using regsvr32.exe. This function takes the path to the DLL file and attempts to unregister it using the regsvr32.exe utility."
"123","Update-ADTDesktop","This function refreshes the Windows Explorer Shell, causing the desktop icons and environment variables to be reloaded. This can be useful after making changes that affect the desktop or environment variables, ensuring that the changes are reflected immediately."
"124","Update-ADTEnvironmentPsProvider","Environment variable changes that take place during script execution are not visible to the current PowerShell session. Use this function to refresh the current PowerShell session with all environment variable settings."
"125","Update-ADTGroupPolicy","This function performs a gpupdate command to refresh Group Policies on the local machine. It updates both Computer and User policies by forcing a refresh using the gpupdate.exe utility."
"126","Write-ADTLogEntry","Write messages to a log file in CMTrace.exe compatible format or Legacy text file format and optionally display in the console. This function supports different severity levels and can be used to log debug messages if required."
